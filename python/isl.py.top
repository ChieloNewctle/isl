import os
from ctypes import *
from ctypes.util import find_library

isl_dyld_library_path = os.environ.get('ISL_DYLD_LIBRARY_PATH')
if isl_dyld_library_path != None:
    os.environ['DYLD_LIBRARY_PATH'] =  isl_dyld_library_path
isl = None
try:
    if isl is None:
        libisl_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'libisl.so')
        isl = CDLL(libisl_path, mode=os.RTLD_LOCAL | os.RTLD_DEEPBIND)
except:
    pass
try:
    if isl is None:
        isl = cdll.LoadLibrary(isl_dlname)
except:
    if isl is None:
        isl = cdll.LoadLibrary(find_library("isl"))

if hasattr(isl, 'free'):
    libc = isl
else:
    libc = cdll.LoadLibrary(find_library("c"))

class Error(Exception):
    pass

class Context:
    defaultInstance = None

    def __init__(self):
        ptr = isl.isl_ctx_alloc()
        self.ptr = ptr

    def __del__(self):
        isl.isl_ctx_free(self)

    def from_param(self):
        return c_void_p(self.ptr)

    @staticmethod
    def getDefaultInstance():
        if Context.defaultInstance == None:
            Context.defaultInstance = Context()
        return Context.defaultInstance

isl.isl_ctx_alloc.restype = c_void_p
isl.isl_ctx_free.argtypes = [Context]
